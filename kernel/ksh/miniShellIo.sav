/*
   This file is part of MutekP.
  
   MutekP is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
  
   MutekP is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.
  
   You should have received a copy of the GNU General Public License
   along with MutekP; if not, write to the Free Software Foundation,
   Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
  
   UPMC / LIP6 / SOC (c) 2008
   Copyright Ghassan Almaless <ghassan.almaless@gmail.com>
*/

#include <ctype.h>
#include <libk.h>
#include <string.h>
#include <sys-vfs.h>
#include <driver.h>
#include <device.h>
#include <kminiShell.h>
#include <sysio.h>
#include <stdarg.h>
 
char getChar()
{
  struct device_s *tty;
  dev_request_t rq;
  char ch;
  size_t size;
  
  ch = 0;
  size = 0;
  tty = &ttys_tbl[0];

  while(size != 1 && size != -1)
  {
    rq.dst = (uint32_t*) &ch;
    rq.count = 1;
    rq.flags = 0;
    size = tty->op.dev.read(tty, &rq);
  }
  return ch;
}

static char ksh_msg_buff[MSG_STR_LEN];

void ksh_print(const char *fmt, ...)
{
  va_list ap;
  struct device_s *tty;
  dev_request_t rq;
  int count;

  va_start (ap, fmt);
  count = iprintk(ksh_msg_buff, 1, (char *) fmt, ap);  
  va_end (ap);

  count = (count < MSG_STR_LEN ) ? count : MSG_STR_LEN - 1;

  ksh_msg_buff[count + 1] = '\0';

  tty = &ttys_tbl[0];
  rq.src = ksh_msg_buff;
  rq.count = count;
  rq.flags = 0;
  (void)tty->op.dev.write(tty, &rq);
}

char* getString(char *buff,size_t size)
{
  char ch = 0;
  char *str = buff;
  char *val = NULL;

  while(size > 0)
  {
    ch=getChar();

    if(ch == '\r')
      continue;

    if(ch == '\n')
      break;

    if(!isprint(ch))
    {
      if((ch == 0x7F) || (ch == 0x08))
	str--;
      size ++;
      continue;
    }

    *str ++ = ch;
    val = buff;
    ch = 0;
    size --;
  }
  *str = 0;
  return val;
}


uint8_t cmdLineAnalyser(char **args)
{
  char buff[128];
  char *str = &buff[0];
  char *arg = args[0];
  uint8_t i;

  memset(args, 0, MS_MAX_ARG_LENGTH * (sizeof (char*)));
  memset(buff,0,sizeof(buff));
  getString(buff,128);
  i=0;

  while((*str != '\0') && (i < 5))
  {
    while((*str) && (isspace(*str))) str++;
    
    if(!(*str)) break;
    
    while((*str) && (!isspace(*str))) *arg++ = (i == 0) ? *str ++ : toupper(*str++);
    i++; arg = *(++args);
  }
  if(i==1)
  {
    arg[0] = '.';
    arg[1]= '\0';
    i = 2;
  }
  return i;
}
